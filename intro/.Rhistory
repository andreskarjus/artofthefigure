d= w %>% strsplit(split="") %>% as.tokens() %>% dfm() %>% as.matrix() %>% melt()
d$docs = as.numeric(gsub("text", "", d$docs))
d$features = d$features %>% factor(.,levels(.)[order(levels(.))])
ggplot(data=d, aes(y=docs, x=features, fill=value)) + geom_tile(colour = "lightgray") + ylab("words") +  theme_classic() + scale_fill_gradient(low = "white", high = "steelblue")+ scale_y_continuous(breaks = 1:31, labels=w)
ggplot(data=d, aes(y=docs, x=features, fill=value)) + geom_tile(colour = "lightgray") + ylab("words") +  theme_classic() + scale_fill_gradient(low = "white", high = "steelblue")+ scale_y_continuous(breaks = 1:length(levels(d$features)), labels=w)
ggplot(data=d, aes(y=docs, x=features, fill=value)) + geom_tile(colour = "lightgray") + ylab("words") +  theme_classic() + scale_fill_gradient(low = "white", high = "steelblue")+ scale_y_continuous(breaks = 1:length(levels(d$docs)), labels=w)
length(levels(d$docs))
ggplot(data=d, aes(y=docs, x=features, fill=value)) + geom_tile(colour = "lightgray") + ylab("words") +  theme_classic() + scale_fill_gradient(low = "white", high = "steelblue")+ scale_y_continuous(breaks = 1:length(unique(d$docs)), labels=w)
w=tokens(tolower("Then were not summer's distillation left - A liquid prisoner pent in walls of glass - Beauty's effect with beauty were bereft - Nor it nor no remembrance what it was. -"))[[1]]
d= w %>% strsplit(split="") %>% as.tokens() %>% dfm() %>% as.matrix() %>% melt()
d$docs = as.numeric(gsub("text", "", d$docs))
d$features = d$features %>% factor(.,levels(.)[order(levels(.))])
ggplot(data=d, aes(y=docs, x=features, fill=value)) + geom_tile(colour = "lightgray") + ylab("words") +  theme_classic() + scale_fill_gradient(low = "white", high = "steelblue")+ scale_y_continuous(breaks = 1:length(unique(d$docs)), labels=w)
ggplot(data=d, aes(y=docs, x=features, fill=value)) +
geom_tile(colour = "lightgray") + ylab("--->") +
theme_classic() + scale_fill_gradient(low = "white", high = "steelblue") +
scale_y_continuous(breaks = 1:length(unique(d$docs)), labels=w)
ggplot(data=d, aes(y=docs, x=features, fill=value)) +
geom_tile(colour = "lightgray") + ylab("> > >") +
theme_classic() + scale_fill_gradient(low = "white", high = "steelblue") +
scale_y_continuous(breaks = 1:length(unique(d$docs)), labels=w)
tokens(movie_review[1,3])[[1]][1:20]
library(text2vec)
tokens(movie_review[1,3])[[1]][1:20]
movie_review$sentiment
says_bad = grepl("bad", movie_review[,3], ignore.case = T)
movie_review[,3]
# find which reviews explicitly say the word "bad"
says_bad = grepl("bad", movie_review[,3], ignore.case = T)
movie_review$sayswhat = ifelse(says_bad, yes="says_bad", no="doesntsay")
sent = table(movie_review[, c("sayswhat", "sentiment")])
# have a look at the object
mosaicplot(sent, col=brewer.pal(3, "Dark2")[c(2,1)] )
library(RColorBrewer)
# have a look at the object
mosaicplot(sent, col=brewer.pal(3, "Dark2")[c(2,1)] )
# recode the sentiment
movie_review$sentiment = ifelse(movie_review$sentiment > 0, yes="pos", no="neg")
sent = table(movie_review[, c("sayswhat", "sentiment")])
# have a look at the object
mosaicplot(sent, col=brewer.pal(3, "Dark2")[c(2,1)] )
1:3 %>% sum() %>% rep(times=4)
1
gc()
gc()
gc()
1
1
1
1
rep(sum(1:3), times=4)
red=runif(1000);green=runif(1000);blue=runif(1000)
plot_ly(x=red,y=green, z=blue, type="scatter3d",mode="markers", color=I(apply(cbind(red, green, blue,0.5),1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black', scene = list(xaxis=list(title="red"),yaxis=list(title="green"), zaxis=list(title="blue")))
library(plotly)
red=runif(1000);green=runif(1000);blue=runif(1000)
plot_ly(x=red,y=green, z=blue, type="scatter3d",mode="markers", color=I(apply(cbind(red, green, blue,0.5),1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black', scene = list(xaxis=list(title="red"),yaxis=list(title="green"), zaxis=list(title="blue")))
plot_ly(x=c(2, 1,1,1,3,3,3, ),y=c(2, 1,2,3,1,2,3), z=c(1, 5,5,5,5,5,5 ), type="scatter3d",mode="markers", color=I(apply(cbind(red, green, blue,0.5),1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black', scene = list(xaxis=list(title="red"),yaxis=list(title="green"), zaxis=list(title="blue")))
# remember the RGB color plots from earlier, the ones with the black background?
red=runif(1000);green=runif(1000);blue=runif(1000)
plot_ly(x=red,y=green, z=blue, type="scatter3d",mode="markers", color=I(apply(cbind(red, green, blue,0.5),1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black', scene = list(xaxis=list(title="red"),yaxis=list(title="green"), zaxis=list(title="blue"))) %>%   config(displayModeBar = F)
# remember the RGB color plots from earlier, the ones with the black background?
col3 = data.frame(red=runif(1000),green=runif(1000),blue=runif(1000))
(apply(col3,1, function(x) rgb(x[1],x[2], x[3])))
plot_ly(col3, x=~red,y=~green, z=~blue, type="scatter3d",mode="markers", color=I(apply(col3,1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black') %>%   config(displayModeBar = F)
plot_ly(col3, x=~red,y=~green, z=~blue, type="scatter3d",mode="markers", marker=list(opacity=0.5), color=I(apply(col3,1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black') %>%   config(displayModeBar = F)
plot_ly(col3, x=~red,y=~green, z=~blue, type="scatter3d",mode="markers", marker=list(opacity=0.8), color=I(apply(col3,1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black') %>%   config(displayModeBar = F)
plot_ly(col3, x=~red,y=~green, z=~blue, type="scatter3d",mode="markers", marker=list(opacity=0.9), color=I(apply(col3,1, function(x) rgb(x[1],x[2], x[3])))) %>% layout(paper_bgcolor='black') %>%   config(displayModeBar = F)
library(ggplot2)
ip <- as.data.frame(installed.packages())
ip <- subset(ip, !grepl("MRO", ip$LibPath))
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
detach("package:ggplot2", unload=TRUE)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
p=c("magrittr","ggplot","cowplot","ggbeeswarm","reshape2","RColorBrewer","viridis","plotly","datasauRus","languageR","igraph","visNetwork","wordcloud","quanteda","text2vec","raster","corrplot","rmarkdown"); install.packages(p); x=p%in%rownames(installed.packages());if(all(x)){print("Packages installed successfully!")}else{print(paste("Failed to install:", paste(p[!x]), ", try again and make sure you have internet connection."))};rm(x,p)
p=c("magrittr","ggplot","cowplot","ggbeeswarm","reshape2","RColorBrewer","viridis","plotly","datasauRus","languageR","igraph","visNetwork","wordcloud","quanteda","text2vec","raster","corrplot","rmarkdown"); install.packages(p); x=p%in%rownames(installed.packages());if(all(x)){print("Packages installed successfully!")}else{print(paste("Failed to install:", paste(p[!x]), ", try again and make sure you have internet connection."))};rm(x,p)
install.packages("ggplot2", repos = "https://cran.rstudio.com", dependencies = TRUE)
install.packages("afewfwfnwofmflwfkm")
install.packages("rworldmap")
load("/Users/pplsuser/Dropbox/kontoril2pakas/keeleokoloogia/2008vÃµrdlus/eesti8_15.RData")
table(eesti8_15$sugu_q1, eesti8_15$ankeedi_aasta)
table(eesti8_15$sugu_q1, eesti8_15$ankeedi_aasta) %>% prop.table(2)
library(magrittr)
table(eesti8_15$sugu_q1, eesti8_15$ankeedi_aasta) %>% prop.table(2)
table(eesti8_15$vanus_q2, eesti8_15$ankeedi_aasta) %>% prop.table(2)
table(ifelse(eesti8_15$vanus_q2 < mean(eesti8_15$vanus_q2), "noor", "vana"), eesti8_15$ankeedi_aasta) %>% prop.table(2)
boxplot(eesti8_15$vanus_q2 ~eesti8_15$ankeedi_aasta)
table(eesti8_15$tootab_opib, eesti8_15$ankeedi_aasta) %>% prop.table(2)
mean(with(eesti8_15, eesti8_15[ aasta=="2015" & piirkond="Tallinn" , eesti8_15$maailmavaade_avatud_uuele_1sarnane_7erinev_u02])
mean(with(eesti8_15, eesti8_15[ aasta=="2015" & piirkond=="Tallinn" , eesti8_15$maailmavaade_avatud_uuele_1sarnane_7erinev_u02])
mean(with(eesti8_15, eesti8_15[ aasta=="2015" & piirkond=="Tallinn" , eesti8_15$maailmavaade_avatud_uuele_1sarnane_7erinev_u02]), na.rm=T)
mean(with(eesti8_15, eesti8_15[ aasta=="2015" & piirkond=="Tallinn" , "maailmavaade_avatud_uuele_1sarnane_7erinev_u02"]), na.rm=T)
mean(with(eesti8_15, eesti8_15[ "aasta"=="2015" & "piirkond"=="Tallinn" , "maailmavaade_avatud_uuele_1sarnane_7erinev_u02"]), na.rm=T)
mean(subset(eesti8_15, aasta"=="2015"))
mean(subset(eesti8_15, aasta=="2015"))
mean(subset(eesti8_15, "aasta"=="2015"))
subset(eesti8_15, "aasta"=="2015")
subset(eesti8_15, "ankeedi_aasta"=="2015")
subset(eesti8_15,  ankeedi_aasta=="2015")
subset(eesti8_15,  ankeedi_aasta=="2015" & piirkond=="Ida-Virumaa" )[, "maailmavaade_avatud_uuele_1sarnane_7erinev_u02"]
subset(eesti8_15,  ankeedi_aasta=="2015" & piirkond=="Ida-Virumaa" )[, "maailmavaade_avatud_uuele_1sarnane_7erinev_u02"] %>% mean()
subset(eesti8_15,  ankeedi_aasta=="2008" & piirkond=="Ida-Virumaa" )[, "maailmavaade_avatud_uuele_1sarnane_7erinev_u02"] %>% mean()
subset(eesti8_15,  ankeedi_aasta=="2008" & piirkond=="Ida-Virumaa" )[, "maailmavaade_avatud_uuele_1sarnane_7erinev_u02"] %>% mean(na.rm=T)
load("/Users/pplsuser/Desktop/korpused/lexcom_model/neibs_denss.RData")
load("/Users/pplsuser/Desktop/korpused/lexcom_model/adv_advres_diss.RData")
load("/Users/pplsuser/Desktop/korpused/lexcom_model/neibs_sem.RData")
#load("/Users/pplsuser/Desktop/korpused/lexcom_model/newvoc/yearsfreqs.RData" )
source("/Users/pplsuser/Dropbox/phd/lexical_competition/lexcom_functions.R")
load("/Users/pplsuser/Desktop/korpused/lexcom_model/targetwords.RData")
load("/Users/pplsuser/Desktop/korpused/lexcom_model/freqmat.RData")
wy = wy[wy$y<182,]
ylist = findperiods(wy, 10, 20 )
ylist = findperiods(wy, 10, 20 )
source("/Users/pplsuser/Dropbox/phd/lexical_competition/lexcom_functions.R")
install.packages("grr")
install.packages("http://www.inf.ed.ac.uk/resources/corpora/")
install.packages("parallel")
install.packages("rms")
install.packages("caret")
source("/Users/pplsuser/Dropbox/phd/lexical_competition/lexcom_functions.R")
install.packages("stringdist")
source("/Users/pplsuser/Dropbox/phd/lexical_competition/lexcom_functions.R")
install.packages("party")
source("/Users/pplsuser/Dropbox/phd/lexical_competition/lexcom_functions.R")
wy = wy[wy$y<182,]
ylist = findperiods(wy, 10, 20 )
problist = do_probmass_neibs_list(ylist=ylist, neibslist=neibs_sem$neiblist, rels=adv_advres_diss$xrels, freqmat=freqmat, semchange=neibs_sem$semchange, rand=F)
dodat = function(problist,adv_advres_diss,wy){
dat = data.frame(
word      = names(problist$pmranks),
year      = year(wy$y),
not0      = wy$not0,
isnew     = as.factor(problist$isnew),
rankequal = problist$pmranks,
simequal  = problist$pmsims,
simequalnorm = 1-problist$pmsimsnorm,
advection = adv_advres_diss$adv,
advresid  = adv_advres_diss$advres,
lexdissem = adv_advres_diss$diss,
topsim    = problist$topsims,
ndown     = problist$ndown,
nup       = problist$pmposranks,
leftover  = problist$leftover,
freqchange= problist$freqchange,
freqchangeabs= problist$freqchangeabs,
minloserpercent = problist$minpercentlosers,
freqsd    = problist$freqsd,
wordage   = {(wy$y - apply(freqmat[wy$word,], 1, function(x) which(x>0)[1])) %>% replace(.<0, 0)},
logfreqt1 = log(problist$freqf1+0.01),
logfreqt2 = log(problist$freqf2),
minstringd= problist$minstringd,
topeditneib=problist$topeditneib,
spellcomm  =problist$spellcomm,
wordlen   = nchar(names(problist$pmranks)),
# denschange= sapply(neibs_denss[[2]], function(x) x["dif"]),
# dens0 = sapply(neibs_denss[[2]], function(x) x["d0"]),
# denschangeraw = sapply(neibs_denss[[2]], function(x) x["raw"]),
losers = problist$losers,
maxsemchange=problist$maxsemchange,
meansemchange=problist$meansemchange,
topneib=problist$topneib,
stringsAsFactors = F
)#;dat$nup3 = as.factor(ifelse(dat$nup<=2, "few", "many"));table(dat$nup3)
dat2 = dat[which(dat$leftover<1
& dat$lexdissem<0.1
# & dat$advection<1
# & dat$nup<=30
& dat$year>=1890
),];# nrow(dat2)
return(dat2)
}
dat2 = dodat(problist,adv_advres_diss,wy)
#### model ####
#library(htmlTable)
f = as.formula(simequalnorm ~advection +topsim +not0 +freqchangeabs+minloserpercent+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year)
#### model ####
#library(htmlTable)
#f = as.formula(simequalnorm ~advection +topsim +not0 +freqchangeabs+minloserpercent+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year)
f = as.formula(simequalnorm ~advection  +not0 +freqchangeabs+minloserpercent+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year) # without topsim, for langlunch
m=lm(f , data = dat2)
dat2$residuals = abs(residuals(m))
summary(m)
d=data.frame(round(coef(summary(m))[,1], 4)[-1], ifelse(coef(summary(m))[,4]<0.001, "<0.001", round(coef(summary(m))[,4], 3)  )[-1] )
d=data.frame(round(coef(summary(m))[,1], 4)[-1], ifelse(coef(summary(m))[,4]<0.001, "<0.001", round(coef(summary(m))[,4], 3)  )[-1] )
rownames(d)=c("advection", "occurs in n years", "abs. freq. change","max %decrease", "sd of yearly freq.",  "sem subspace instability", "form uniqueness", "closest neighbor (edit dist)", "polsemy", "leftover probmass","corpus word age",  "decade")
d$i = c( "lower comm. need",  "bursty series", "lower freq (change)","a clear loser",  "", "", "", "", "", "", "", "")
colnames(d)=c("Estimate", "p", "clearer competition signal if...")
modeltable = d  #htmlTable::htmlTable(d, tfoot = "R<sup>2</sup>=0.19, F=11.3(12,509), p<0.001",pos.caption="top", caption="Linear regression model predicting the distance in the similarity vector where probability mass gets equalized (cosine units, normalized by the value of the top neighbor)", css.table = "margin-left:10mm; margin-right:10mm; margin-top: 1em; margin-bottom: 1em;", )
library(htmlTable)
modeltable = d  #htmlTable::htmlTable(d, tfoot = "R<sup>2</sup>=0.19, F=11.3(12,509), p<0.001",pos.caption="top", caption="Linear regression model predicting the distance in the similarity vector where probability mass gets equalized (cosine units, normalized by the value of the top neighbor)", css.table = "margin-left:10mm; margin-right:10mm; margin-top: 1em; margin-bottom: 1em;", )
summary(m)
load("/Users/pplsuser/Dropbox/phd/lexical_competition/isle/posterplots.RData")
f = as.formula(simequalnorm ~advection  +not0 +freqchangeabs+minloserpercent+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year) # without topsim, for langlunch
m=lm(f , data = dat2)
dat2$residuals = abs(residuals(m))
summary(m)
d=data.frame(round(coef(summary(m))[,1], 4)[-1], ifelse(coef(summary(m))[,4]<0.001, "<0.001", round(coef(summary(m))[,4], 3)  )[-1] )
rownames(d)=c("advection", "occurs in n years", "abs. freq. change","max %decrease", "sd of yearly freq.",  "sem subspace instability", "form uniqueness", "closest neighbor (edit dist)", "polsemy", "leftover probmass","corpus word age",  "decade")
d$i = c( "lower comm. need",  "bursty series", "lower freq (change)","a clear loser",  "", "", "", "", "", "", "", "")
colnames(d)=c("Estimate", "p", "clearer competition signal if...")
modeltable = d  #htmlTable::htmlTable(d, tfoot = "R<sup>2</sup>=0.19, F=11.3(12,509), p<0.001",pos.caption="top", caption="Linear regression model predicting the distance in the similarity vector where probability mass gets equalized (cosine units, normalized by the value of the top neighbor)", css.table = "margin-left:10mm; margin-right:10mm; margin-top: 1em; margin-bottom: 1em;", )
# nup and simequalnorm correlate
#with(dat2, cor(log(1+nup), simequalnorm)) #  0.7507595
#### results plot ####
# f= as.formula(simequalnorm ~advection +topsim +not0 +freqchangeabs+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year)
f= as.formula(simequalnorm ~advection  +not0 +freqchangeabs+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year)
m=lm(f , data = dat2)
dat2$residuals = abs(residuals(m))
m2=(lm( simequalnorm ~advection  , data = dat2))#; summary(m2)
sq = with(dat2, seq(min(advection), max(advection), length.out=nrow(dat2) ))
cols = colorRampPalette(c("black", "lightgray", "red"))(50)[cut(abs(residuals(m)), seq(0,max(abs(residuals(m))), length.out = 50) ,  include.lowest = T)]
pr=predict(m2, newdata = data.frame(advection=sq), interval="confidence")
txt = paste( paste0(dat2$word, " (", dat2$year, ")"), paste("closest:", dat2$topneib, round(dat2$topsim,2),"cosine"), paste("neighbrs with increasing freq", dat2$nup),
ifelse(dat2$simequal>0.5, paste("losers by", round(dat2$simequalnorm,2) ,"normd dist:\n",dat2$losers, ""), "") , sep="\n")
resultsplot = dat2 %>% plot_ly(type="scatter", showlegend=F, colors=
viridis::cividis(50,1,0.3,1) ) %>%
add_trace(y=~simequalnorm, x=~advection, color=~residuals,  marker=list(size=8, opacity=0.8),
hoverinfo="text", text=txt, type="scatter", mode="markers", showlegend=F) %>%
add_trace(x=sq, y=pr[,1], mode="lines", type="scatter",  inherit=F, showlegend=F, hoverinfo="none", line=list(color="black"), showlegend=F) %>%
add_polygons(x=c(sq, rev(sq)), y=c(pr[,2], rev(pr[,3])),   inherit=T, showlegend=F, hoverinfo="none", line=list(color=rgb(1,1,1,0)), fillcolor=rgb(0,0,0,0.3)) %>%
layout(margin=list(l = 40, r = 1, b = 60, t = 1, pad = 0), yaxis=list(zeroline=F, title="normd. dist where prob. mass equalized"), xaxis=list(zeroline=F, title="advection (mean topic change; proxy to comm.need)\n[yellowness of dots: absolute residual value in full model]")) %>% config(displayModeBar = F) %>% hide_colorbar(); resultsplot
save(modeltable, advplot, displot, trendplot, resultsplot, file="/Users/pplsuser/Dropbox/phd/lexical_competition/isle/posterplots.RData")
m2
summary(m2)
modeltable
#### model ####
#library(htmlTable)
#f = as.formula(simequalnorm ~advection +topsim +not0 +freqchangeabs+minloserpercent+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year)
f = as.formula(simequalnorm ~advection  +not0 +freqchangeabs+minloserpercent+freqsd+meansemchange+spellcomm+minstringd+lexdissem+leftover+wordage+year) # without topsim, for langlunch
m=lm(f , data = dat2)
dat2$residuals = abs(residuals(m))
summary(m)
modeltable
modeltable[1:5, ]
modeltable[1:4, ]
library(devtools)
# bibliography: MyBib.bib
devtools::install_github("brentthorne/posterdown")
19+12+22.4+1+14.25+4.8
12+22.4+1+14.25+4.8
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github(repo =  'ramnathv/slidify')
install_github(repo =  'ramnathv/slidifyLibraries')
slidify::author("intro")
library(plotly, quietly=T)
rmarkdown::render("index.Rmd"); browseURL("index.html")
rmarkdown::render("index.Rmd"); browseURL("index.html")
slidify::slidify("index.Rmd"); browseURL("index.html")
getwd()
library(plotly, quietly=T)
p=plot_ly(data = iris, x=~Petal.Width, y=~Petal.Length)
htmlwidgets::saveWidget(as.widget(p), file = "p.html")
htmlwidgets::saveWidget(as_widget(p), file = "p.html")
install.packages("gganimate")
install.packages("gapminder")
library(gganimate, quietly=T)
library(ggplot2)
library(gapminder)
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
transition_time(year) +
shadow_wake(wake_length = 0.05, alpha = T)
p
install.packages("gifski")
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
transition_time(year) +
shadow_wake(wake_length = 0.05, alpha = T)
animate(p, bg = 'transparent')
install.packages("png")
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme(rect = element_rect(fill = "transparent")) +
transition_time(year) +
shadow_wake(wake_length = 0.05, alpha = T)
p
anim_save("p.gif", p, bg = 'transparent')
p <- ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_minimal() +
theme(rect = element_rect(fill = "transparent")) +
transition_time(year) +
shadow_wake(wake_length = 0.05, alpha = T)
anim_save("p.gif", p, bg = 'transparent')
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) +
#  transition_time(year) +
shadow_wake(wake_length = 0.05, alpha = T)
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
, panel.grid.major = element_blank() # get rid of major grid
, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) #+
p <-
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) + transition_time(year) + shadow_wake(wake_length = 0.05, alpha = F)
anim_save("p.gif", p, bg = 'transparent', width = 1000, height = 1000)
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_gray() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_light() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
)
p <-
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "{frame_time}") +
theme_light() +
theme(
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) + transition_time(year) + shadow_wake(wake_length = 0.05, alpha = F)
anim_save("p.gif", p, bg = 'transparent', width = 700, height = 700,  res=200)
p <-
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "") +
theme_gray() +
theme(
axis.text.x = element_blank(), axis.ticks = element_blank(),
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) + transition_time(year) + shadow_wake(wake_length = 0.05, alpha = F)
anim_save("p.gif", p, bg = 'transparent', width = 800, height = 800,  res=200)
p <-
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "", y = "", title = "") +
theme_gray() +
theme(
axis.ticks = element_blank(),
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) + transition_time(year) + shadow_wake(wake_length = 0.05, alpha = F)
anim_save("p.gif", p, bg = 'transparent', width = 900, height = 900,  res=200)
p <-
ggplot(
gapminder,
aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)
) +
geom_point(show.legend = FALSE) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "{frame_time}", y = "", title = "") +
theme_gray() +
theme(
axis.ticks = element_blank(),
panel.background = element_rect(fill = "transparent") # bg of the panel
, plot.background = element_rect(fill = "transparent", color = NA) # bg of the plot
# , panel.grid.major = element_blank() # get rid of major grid
#, panel.grid.minor = element_blank() # get rid of minor grid
, legend.background = element_rect(fill = "transparent") # get rid of legend bg
, legend.box.background = element_rect(fill = "transparent") # get rid of legend panel bg
) + transition_time(year) + shadow_wake(wake_length = 0.05, alpha = F)
anim_save("p.gif", p, bg = 'transparent', width = 900, height = 900,  res=200)
